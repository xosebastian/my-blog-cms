import { ObjectId } from 'mongodb'

/**
 * Represents an article as stored in the MongoDB database.
 */
export interface Article {
  /** Unique identifier generated by MongoDB */
  _id: ObjectId

  /** Title of the article */
  title: string

  /** Full content of the article */
  content: string

  /** URL of the cover image */
  coverImage: string

  /** Unique identifier of the author (as a string) */
  authorId: string

  /** Display name of the author */
  authorName: string

  /** Date when the article was created */
  createdAt: Date
}

/**
 * Data Transfer Object (DTO) for returning articles to the client.
 * Replaces `_id` with `id` and converts `createdAt` to ISO string format.
 */
export type ArticleDto = Omit<Article, '_id' | 'createdAt'> & {
  /** ID of the article, serialized from MongoDB's ObjectId */
  id: string

  /** ISO string representation of the creation date */
  createdAt: string
}

/**
 * Converts a raw Article object (from the database) into a serializable ArticleDto.
 *
 * @param article - The raw `Article` object retrieved from MongoDB.
 * @returns An `ArticleDto` with a string `id` and `createdAt`.
 */
export function toArticleDto(article: Article): ArticleDto {
  return {
    id: article._id.toString(),
    title: article.title,
    content: article.content,
    coverImage: article.coverImage,
    authorId: article.authorId,
    authorName: article.authorName,
    createdAt: article.createdAt.toISOString(),
  }
}
